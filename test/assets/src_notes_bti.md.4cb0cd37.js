import{_ as a,h as e,i as t,R as l}from"./chunks/framework.7e07dabb.js";const m=JSON.parse('{"title":"位运算","description":"","frontmatter":{},"headers":[],"relativePath":"src/notes/bti.md","filePath":"src/notes/bti.md","lastUpdated":1692932276000}'),i={name:"src/notes/bti.md"},r=l('<h1 id="位运算" tabindex="-1">位运算 <a class="header-anchor" href="#位运算" aria-label="Permalink to &quot;位运算&quot;">​</a></h1><h2 id="按位与" tabindex="-1">按位与 <a class="header-anchor" href="#按位与" aria-label="Permalink to &quot;按位与&quot;">​</a></h2><ul><li>两位运算符 &amp; 的作用是按位与，即把两个数的每一位进行与运算，如果两个数的对应位都为1，则结果为1，否则为0。</li></ul><h2 id="按位或" tabindex="-1">按位或 <a class="header-anchor" href="#按位或" aria-label="Permalink to &quot;按位或&quot;">​</a></h2><ul><li>两位运算符 | 的作用是按位或，即把两个数的每一位进行或运算，如果两个数的对应位都为0，则结果为0，否则为1。</li></ul><h2 id="按位异或" tabindex="-1">按位异或 <a class="header-anchor" href="#按位异或" aria-label="Permalink to &quot;按位异或&quot;">​</a></h2><ul><li>两位运算符 ^ 的作用是按位异或，进行异或运算时，当前位的两个二进制表示不同则为1 ，相同则为0</li></ul><h2 id="按位取反" tabindex="-1">按位取反 <a class="header-anchor" href="#按位取反" aria-label="Permalink to &quot;按位取反&quot;">​</a></h2><ul><li>两位运算符 ~ 的作用是按位取反，即把两个数的每一位进行取反运算，如果两个数的对应位为0，则结果为1，如果两个数的对应位为1，则结果为0。</li></ul><h2 id="按位左移" tabindex="-1">按位左移 <a class="header-anchor" href="#按位左移" aria-label="Permalink to &quot;按位左移&quot;">​</a></h2><ul><li>两位运算符 &lt;&lt; 的作用是按位左移，即把两个数的每一位进行左移运算。</li></ul><h2 id="按位右移" tabindex="-1">按位右移 <a class="header-anchor" href="#按位右移" aria-label="Permalink to &quot;按位右移&quot;">​</a></h2><ul><li>两位运算符 &gt;&gt; 的作用是按位右移，即把两个数的每一位进行右移运算。</li></ul>',13),o=[r];function h(n,s,d,c,u,_){return e(),t("div",null,o)}const f=a(i,[["render",h]]);export{m as __pageData,f as default};
